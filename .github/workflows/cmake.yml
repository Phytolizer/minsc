name: CMake

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    strategy:
      matrix:
        include:
          - os: windows-latest
            preset: dist-win
            triplet: x64-windows
          - os: ubuntu-latest
            preset: dist
            triplet: x64-linux

    runs-on: ${{ matrix.os }}
    
    env:
      VCPKG_ROOT: ${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: true
    
    - uses: johnwason/vcpkg-action@v2
      with:
        triplet: ${{ matrix.triplet }}
        revision: 1912e1a397ac4f79fc51e4ed2190de25278d31b8

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake --preset ${{ matrix.preset }}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build --preset ${{ matrix.preset }}

    # don't have tests yet
#     - name: Test
#       working-directory: ${{github.workspace}}/build
#       # Execute tests defined by the CMake configuration.  
#       # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
#       run: ctest -C ${{env.BUILD_TYPE}}
      
